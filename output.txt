Now: 1582436439942053
Now: 1582436439951424
Tokens:
keyword const
space \s
ident max
space \s
keyword =
space \s
number 100
keyword ;
space \n
keyword var
space \s
ident arg
keyword ,
space \s
ident ret
keyword ;
space \n\n
keyword procedure
space \s
ident isprime
keyword ;
space \n
keyword var
space \s
ident i
keyword ;
space \n
keyword begin
space \n\t
ident ret
space \s
keyword :=
space \s
number 1
keyword ;
space \n\t
ident i
space \s
keyword :=
space \s
number 2
keyword ;
space \n\t
keyword while
space \s
ident i
space \s
keyword <
space \s
ident arg
space \s
keyword do
space \n\t
keyword begin
space \n\t\t
keyword if
space \s
ident arg
space \s
keyword /
space \s
ident i
space \s
keyword *
space \s
ident i
space \s
keyword =
space \s
ident arg
space \s
keyword then
space \n\t\t
keyword begin
space \n\t\t\t
ident ret
space \s
keyword :=
space \s
number 0
keyword ;
space \n\t\t\t
ident i
space \s
keyword :=
space \s
ident arg
space \n\t\t
keyword end
keyword ;
space \n\t\t
ident i
space \s
keyword :=
space \s
ident i
space \s
keyword +
space \s
number 1
space \n\t
keyword end
space \n
keyword end
keyword ;
space \n\n
keyword procedure
space \s
ident primes
keyword ;
space \n
keyword begin
space \n\t
ident arg
space \s
keyword :=
space \s
number 2
keyword ;
space \n\t
keyword while
space \s
ident arg
space \s
keyword <
space \s
ident max
space \s
keyword do
space \n\t
keyword begin
space \n\t\t
keyword call
space \s
ident isprime
keyword ;
space \n\t\t
keyword if
space \s
ident ret
space \s
keyword =
space \s
number 1
space \s
keyword then
space \s
keyword !
space \s
ident arg
keyword ;
space \n\t\t
ident arg
space \s
keyword :=
space \s
ident arg
space \s
keyword +
space \s
number 1
space \n\t
keyword end
space \n
keyword end
keyword ;
space \n\n
keyword call
space \s
ident primes
space \n
keyword .
eof

AST:
Program
  Block
    Assign
      keyword const
      ident max
      keyword =
      number 100
      keyword ;
    Declare
      keyword var
      ident arg
      DeclareRest
        keyword ,
        ident ret
      keyword ;
    Procedure
      keyword procedure
      ident isprime
      keyword ;
      Block
        Declare
          keyword var
          ident i
          keyword ;
        Statement
          keyword begin
          Statement
            ident ret
            keyword :=
            Expression
              Term
                Factor
                  number 1
          StatementRest
            keyword ;
            Statement
              ident i
              keyword :=
              Expression
                Term
                  Factor
                    number 2
            StatementRest
              keyword ;
              Statement
                keyword while
                Condition
                  Expression
                    Term
                      Factor
                        ident i
                  RelationOp
                    keyword <
                  Expression
                    Term
                      Factor
                        ident arg
                keyword do
                Statement
                  keyword begin
                  Statement
                    keyword if
                    Condition
                      Expression
                        Term
                          Factor
                            ident arg
                          TermRest
                            Op2
                              keyword /
                            Factor
                              ident i
                            TermRest
                              Op2
                                keyword *
                              Factor
                                ident i
                      RelationOp
                        keyword =
                      Expression
                        Term
                          Factor
                            ident arg
                    keyword then
                    Statement
                      keyword begin
                      Statement
                        ident ret
                        keyword :=
                        Expression
                          Term
                            Factor
                              number 0
                      StatementRest
                        keyword ;
                        Statement
                          ident i
                          keyword :=
                          Expression
                            Term
                              Factor
                                ident arg
                      keyword end
                  StatementRest
                    keyword ;
                    Statement
                      ident i
                      keyword :=
                      Expression
                        Term
                          Factor
                            ident i
                        ExpressionRest
                          Op1
                            keyword +
                          Term
                            Factor
                              number 1
                  keyword end
          keyword end
      keyword ;
      Procedure
        keyword procedure
        ident primes
        keyword ;
        Block
          Statement
            keyword begin
            Statement
              ident arg
              keyword :=
              Expression
                Term
                  Factor
                    number 2
            StatementRest
              keyword ;
              Statement
                keyword while
                Condition
                  Expression
                    Term
                      Factor
                        ident arg
                  RelationOp
                    keyword <
                  Expression
                    Term
                      Factor
                        ident max
                keyword do
                Statement
                  keyword begin
                  Statement
                    keyword call
                    ident isprime
                  StatementRest
                    keyword ;
                    Statement
                      keyword if
                      Condition
                        Expression
                          Term
                            Factor
                              ident ret
                        RelationOp
                          keyword =
                        Expression
                          Term
                            Factor
                              number 1
                      keyword then
                      Statement
                        keyword !
                        Expression
                          Term
                            Factor
                              ident arg
                    StatementRest
                      keyword ;
                      Statement
                        ident arg
                        keyword :=
                        Expression
                          Term
                            Factor
                              ident arg
                          ExpressionRest
                            Op1
                              keyword +
                            Term
                              Factor
                                number 1
                  keyword end
            keyword end
        keyword ;
    Statement
      keyword call
      ident primes
  keyword .